git commit -> cria o commit do arquivo.
git commit -m "mensagem" -> faz o commit e adiciona uma mensagem entre aspas.
git add -> adiciona um arquivo para ser comitado.
git add . -> adiciona todos os arquivos para serem comitados.
git config --global core.editor  -> troca o editor de texto.
git push -> envia os arquivos já comitados para o repositório local.
git pull -> baixa os arquivos do repositório remoto para o repositório local.

Os comandos passados a cima são os principais comando mais utilizados para editar, commitar e sincronizar com o repositorio remoto.

git status -> ver o status dos arquivo que já foram adicionado ou não para serem comitados.
git log -> exibir os aquivos já comitados com seus codigos e referencia.

Os comandos acima são mais utilizados para exibir o stado que os arquivos se encotram se já foram adicionados ou comitados, e o git log tras toda a lista de comits realizados assim ficando facil encontrar as atualizações feitas no arquivo.

git diff -> exibir a difirtenças entre commits e branchs.
git diff [path] -> diferença no diretorio
git diff HEAD~1 -> mostra a diferença do arquivo atual para oque tinha antes do ultimo comit.
git clone<URL> -> clona o repositório remoto.

cd -> voltar pastas de acesso.
cd (destino) -> vai a pasta destino, porém é necessario todo o caminho pasta a pasta.
ex: cd 'Área de Trabalho'(nomes com espaços precisam estar entre aspas). 
    cd Nova-Pasta nomes não separado por espaços não precisam de aspas.


git checkout <commit> <file> -> esse comando retorna ao commit desejado(pegando o codigo, "não é necessario ser o codigo completo") e se especificar oaqruivo tbm é possivel ver só o arquivo no ponto daquele commit. O comando git checkout tbm pode ser usado para navegar pelas branch, e caso entre no modo checkout para retornar para a branch principal ou qlqr outra que deseje é só usar o comando [git checkout master].

git checkout -- <file> ou <.> -> Remove todas as modificações antes de serem commitadas, ou referente a um arquivo, ou se usar o <.> todos os arquivos.
git checkout HEAD -- <file> -> desfaz as alterações desde o ultimo commit incluindo as alteração que ainda estiverem no stage.
git revert <commit> -> reverte um commit, caso seja commitado e precise ser retirado, o revert vai refazer para o commit marcado. 
git reset --hard <commit> -> o uso do [git reset --hard <commit>] vc reseta o commit e apaga ele da lista de commits(não usar caso já tenha feito push no GitHub.).

git branch <nova_branch> -> cria uma nova branch com o nome desejado.
git branch -d <branch> -> exclui a branch informada.